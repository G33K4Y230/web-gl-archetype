var vertexShaderText = [
    "precision mediump float;",
    "",
    "attribute vec2 vertPosition;",
    "attribute vec3 vertColor;",
    "",
    "varying vec3 fragColor;",
    "",
    "void main()",
    "{",
    "fragColor = vertColor;",
    "gl_Position = vec4(vertPosition, 0.0, 1.0);",
    "}"
].join('\n');

var fragmentShaderText = [
    "precision mediump float;",
    "",
    "varying vec3 fragColor;",
    "",
    "void main()",
    "{",
    "gl_FragColor = vec4(fragColor, 1.0);",
    "}"
].join('\n');

const resizeViewport = () => {
    
    var canvas = document.getElementById('game-surface');
    var gl = canvas.getContext('webgl');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    gl.viewport(0, 0, window.innerWidth, window.innerHeight);
}

var InitDemo = function() {

    var canvas = document.getElementById('game-surface');
    var gl = canvas.getContext('webgl2');

    if(!gl) {
	console.log('Error! Failed to get a valid OpenGL2 context!');
	console.log("Your browser does not support OpenGL ES 3.0!");
    }

    resizeViewport();
   
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexShaderText);
    gl.compileShader(vertexShader);
    if(!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
	console.error("Error! Failed to compile vertex shader!",
		      gl.getShaderInfoLog(vertexShader));
	return;
    }

    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentShaderText);
    gl.compileShader(fragmentShader);
    if(!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
	console.error("Error! Failed to compile fragment shader!",
		      gl.getShaderInfoLog(fragmentShader));
	return;
    }

    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if(!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	console.error("Error! Failed to link shader program!",
		      gl.getProgramInfoLog(program));
	return;
    }

    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);

    gl.validateProgram(program);
    if(!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {
	console.error("Error! Failed to validate program!",
		      gl.getProgramInfoLog(program));
	return;
    }

    const VAO = gl.createVertexArray();
    gl.bindVertexArray(VAO);
    
    var triangleVertices = [
	0.0,  0.5,     1.0, 0.0, 0.0,
	-0.5, -0.5,    0.0, 1.0, 0.0,
	0.5, -0.5,     0.0, 0.0, 1.0
    ]

    var triangleVertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(triangleVertices), gl.STATIC_DRAW);

    var positionAttribLocation = gl.getAttribLocation(program, "vertPosition");
    gl.vertexAttribPointer(
	positionAttribLocation,
	2,
	gl.FLOAT,
	gl.FALSE,
	5 * Float32Array.BYTES_PER_ELEMENT,
	0
    );
    var colorAttribLocation = gl.getAttribLocation(program, "vertColor");
    gl.vertexAttribPointer(
	colorAttribLocation,
	3,
	gl.FLOAT,
	gl.FALSE,
	5 * Float32Array.BYTES_PER_ELEMENT,
	2 * Float32Array.BYTES_PER_ELEMENT
    );

    gl.enableVertexAttribArray(positionAttribLocation);
    gl.enableVertexAttribArray(colorAttribLocation);

    function clear() {
	const r = Math.random();
	const g = Math.random();
	const b = Math.random();
	gl.clearColor(0.75, 0.75, 0.75, 1.0);
	gl.clear(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT);
    }
    
    function draw() {
	clear();
	gl.useProgram(program);
	gl.drawArrays(gl.TRIANGLES, 0, 3);
	//requestAnimationFrame(draw);
	setTimeout(() => { requestAnimationFrame(draw) }, 350);
    }

    draw();
    
}
